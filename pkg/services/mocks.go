// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/services/types.go
//
// Generated by this command:
//
//	mockgen -package services -destination ../pkg/services/mocks.go -source ../pkg/services/types.go
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	models "github.com/guidomantilla/vaccination-record-system/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenManager is a mock of TokenManager interface.
type MockTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockTokenManagerMockRecorder
}

// MockTokenManagerMockRecorder is the mock recorder for MockTokenManager.
type MockTokenManagerMockRecorder struct {
	mock *MockTokenManager
}

// NewMockTokenManager creates a new mock instance.
func NewMockTokenManager(ctrl *gomock.Controller) *MockTokenManager {
	mock := &MockTokenManager{ctrl: ctrl}
	mock.recorder = &MockTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenManager) EXPECT() *MockTokenManagerMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockTokenManager) Generate(user *models.User) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", user)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockTokenManagerMockRecorder) Generate(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockTokenManager)(nil).Generate), user)
}

// Validate mocks base method.
func (m *MockTokenManager) Validate(tokenString string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", tokenString)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockTokenManagerMockRecorder) Validate(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockTokenManager)(nil).Validate), tokenString)
}

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuthService) Authorize(ctx context.Context, tokenString string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", ctx, tokenString)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthServiceMockRecorder) Authorize(ctx, tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthService)(nil).Authorize), ctx, tokenString)
}

// Login mocks base method.
func (m *MockAuthService) Login(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), ctx, user)
}

// Signup mocks base method.
func (m *MockAuthService) Signup(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *MockAuthServiceMockRecorder) Signup(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockAuthService)(nil).Signup), ctx, user)
}

// MockDrugsService is a mock of DrugsService interface.
type MockDrugsService struct {
	ctrl     *gomock.Controller
	recorder *MockDrugsServiceMockRecorder
}

// MockDrugsServiceMockRecorder is the mock recorder for MockDrugsService.
type MockDrugsServiceMockRecorder struct {
	mock *MockDrugsService
}

// NewMockDrugsService creates a new mock instance.
func NewMockDrugsService(ctrl *gomock.Controller) *MockDrugsService {
	mock := &MockDrugsService{ctrl: ctrl}
	mock.recorder = &MockDrugsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrugsService) EXPECT() *MockDrugsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDrugsService) Create(ctx context.Context, drug *models.Drug) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, drug)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDrugsServiceMockRecorder) Create(ctx, drug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDrugsService)(nil).Create), ctx, drug)
}

// Delete mocks base method.
func (m *MockDrugsService) Delete(ctx context.Context, drug *models.Drug) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, drug)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDrugsServiceMockRecorder) Delete(ctx, drug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDrugsService)(nil).Delete), ctx, drug)
}

// Find mocks base method.
func (m *MockDrugsService) Find(ctx context.Context) ([]models.Drug, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx)
	ret0, _ := ret[0].([]models.Drug)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockDrugsServiceMockRecorder) Find(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDrugsService)(nil).Find), ctx)
}

// Update mocks base method.
func (m *MockDrugsService) Update(ctx context.Context, drug *models.Drug) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, drug)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDrugsServiceMockRecorder) Update(ctx, drug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDrugsService)(nil).Update), ctx, drug)
}

// MockVaccinationsService is a mock of VaccinationsService interface.
type MockVaccinationsService struct {
	ctrl     *gomock.Controller
	recorder *MockVaccinationsServiceMockRecorder
}

// MockVaccinationsServiceMockRecorder is the mock recorder for MockVaccinationsService.
type MockVaccinationsServiceMockRecorder struct {
	mock *MockVaccinationsService
}

// NewMockVaccinationsService creates a new mock instance.
func NewMockVaccinationsService(ctrl *gomock.Controller) *MockVaccinationsService {
	mock := &MockVaccinationsService{ctrl: ctrl}
	mock.recorder = &MockVaccinationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaccinationsService) EXPECT() *MockVaccinationsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVaccinationsService) Create(ctx context.Context, vaccination *models.Vaccination) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, vaccination)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVaccinationsServiceMockRecorder) Create(ctx, vaccination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVaccinationsService)(nil).Create), ctx, vaccination)
}

// Delete mocks base method.
func (m *MockVaccinationsService) Delete(ctx context.Context, vaccination *models.Vaccination) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, vaccination)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVaccinationsServiceMockRecorder) Delete(ctx, vaccination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVaccinationsService)(nil).Delete), ctx, vaccination)
}

// Find mocks base method.
func (m *MockVaccinationsService) Find(ctx context.Context) ([]models.Vaccination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx)
	ret0, _ := ret[0].([]models.Vaccination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockVaccinationsServiceMockRecorder) Find(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockVaccinationsService)(nil).Find), ctx)
}

// Update mocks base method.
func (m *MockVaccinationsService) Update(ctx context.Context, vaccination *models.Vaccination) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, vaccination)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVaccinationsServiceMockRecorder) Update(ctx, vaccination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVaccinationsService)(nil).Update), ctx, vaccination)
}
