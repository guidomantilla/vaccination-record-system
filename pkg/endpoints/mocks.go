// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/endpoints/types.go
//
// Generated by this command:
//
//	mockgen -package endpoints -destination ../pkg/endpoints/mocks.go -source ../pkg/endpoints/types.go
//

// Package endpoints is a generated GoMock package.
package endpoints

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthEndpoint is a mock of AuthEndpoint interface.
type MockAuthEndpoint struct {
	ctrl     *gomock.Controller
	recorder *MockAuthEndpointMockRecorder
}

// MockAuthEndpointMockRecorder is the mock recorder for MockAuthEndpoint.
type MockAuthEndpointMockRecorder struct {
	mock *MockAuthEndpoint
}

// NewMockAuthEndpoint creates a new mock instance.
func NewMockAuthEndpoint(ctrl *gomock.Controller) *MockAuthEndpoint {
	mock := &MockAuthEndpoint{ctrl: ctrl}
	mock.recorder = &MockAuthEndpointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthEndpoint) EXPECT() *MockAuthEndpointMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuthEndpoint) Authorize(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Authorize", ctx)
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthEndpointMockRecorder) Authorize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthEndpoint)(nil).Authorize), ctx)
}

// Login mocks base method.
func (m *MockAuthEndpoint) Login(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Login", ctx)
}

// Login indicates an expected call of Login.
func (mr *MockAuthEndpointMockRecorder) Login(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthEndpoint)(nil).Login), ctx)
}

// Signup mocks base method.
func (m *MockAuthEndpoint) Signup(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Signup", ctx)
}

// Signup indicates an expected call of Signup.
func (mr *MockAuthEndpointMockRecorder) Signup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockAuthEndpoint)(nil).Signup), ctx)
}

// MockDrugsEndpoint is a mock of DrugsEndpoint interface.
type MockDrugsEndpoint struct {
	ctrl     *gomock.Controller
	recorder *MockDrugsEndpointMockRecorder
}

// MockDrugsEndpointMockRecorder is the mock recorder for MockDrugsEndpoint.
type MockDrugsEndpointMockRecorder struct {
	mock *MockDrugsEndpoint
}

// NewMockDrugsEndpoint creates a new mock instance.
func NewMockDrugsEndpoint(ctrl *gomock.Controller) *MockDrugsEndpoint {
	mock := &MockDrugsEndpoint{ctrl: ctrl}
	mock.recorder = &MockDrugsEndpointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrugsEndpoint) EXPECT() *MockDrugsEndpointMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDrugsEndpoint) Create(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", ctx)
}

// Create indicates an expected call of Create.
func (mr *MockDrugsEndpointMockRecorder) Create(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDrugsEndpoint)(nil).Create), ctx)
}

// Delete mocks base method.
func (m *MockDrugsEndpoint) Delete(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx)
}

// Delete indicates an expected call of Delete.
func (mr *MockDrugsEndpointMockRecorder) Delete(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDrugsEndpoint)(nil).Delete), ctx)
}

// Find mocks base method.
func (m *MockDrugsEndpoint) Find(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Find", ctx)
}

// Find indicates an expected call of Find.
func (mr *MockDrugsEndpointMockRecorder) Find(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDrugsEndpoint)(nil).Find), ctx)
}

// Update mocks base method.
func (m *MockDrugsEndpoint) Update(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", ctx)
}

// Update indicates an expected call of Update.
func (mr *MockDrugsEndpointMockRecorder) Update(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDrugsEndpoint)(nil).Update), ctx)
}

// MockVaccinationsEndpoint is a mock of VaccinationsEndpoint interface.
type MockVaccinationsEndpoint struct {
	ctrl     *gomock.Controller
	recorder *MockVaccinationsEndpointMockRecorder
}

// MockVaccinationsEndpointMockRecorder is the mock recorder for MockVaccinationsEndpoint.
type MockVaccinationsEndpointMockRecorder struct {
	mock *MockVaccinationsEndpoint
}

// NewMockVaccinationsEndpoint creates a new mock instance.
func NewMockVaccinationsEndpoint(ctrl *gomock.Controller) *MockVaccinationsEndpoint {
	mock := &MockVaccinationsEndpoint{ctrl: ctrl}
	mock.recorder = &MockVaccinationsEndpointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaccinationsEndpoint) EXPECT() *MockVaccinationsEndpointMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVaccinationsEndpoint) Create(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", ctx)
}

// Create indicates an expected call of Create.
func (mr *MockVaccinationsEndpointMockRecorder) Create(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVaccinationsEndpoint)(nil).Create), ctx)
}

// Delete mocks base method.
func (m *MockVaccinationsEndpoint) Delete(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx)
}

// Delete indicates an expected call of Delete.
func (mr *MockVaccinationsEndpointMockRecorder) Delete(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVaccinationsEndpoint)(nil).Delete), ctx)
}

// Find mocks base method.
func (m *MockVaccinationsEndpoint) Find(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Find", ctx)
}

// Find indicates an expected call of Find.
func (mr *MockVaccinationsEndpointMockRecorder) Find(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockVaccinationsEndpoint)(nil).Find), ctx)
}

// Update mocks base method.
func (m *MockVaccinationsEndpoint) Update(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", ctx)
}

// Update indicates an expected call of Update.
func (mr *MockVaccinationsEndpointMockRecorder) Update(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVaccinationsEndpoint)(nil).Update), ctx)
}
